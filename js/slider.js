'use strict';   // Mode strict du JavaScript

/*************************************************************************************************/
/* ****************************************** DONNEES ****************************************** */
/*************************************************************************************************/
// Codes des touches du clavier.
const SPACE_KEY= 'Space';
const LEFT_ARROW_KEY = 'ArrowLeft';
const RIGHT_ARROW_KEY = 'ArrowRight';

// La liste des slides du carrousel. Un tableau d'objets chaque objet aura deux propri√©t√© une qui sera l'image (url) et l'autre la description
const slides =
[
    { image: 'images/1.jpg', legend: 'Mountain landscape'},
    { image: 'images/2.jpg', legend: 'Roma city'         },
    { image: 'images/3.jpg', legend: 'Colorful Building'   },
    { image: 'images/4.jpg', legend: 'Skyscrapers'         },
    { image: 'images/5.jpg', legend: 'Rome at night'       },
    { image: 'images/6.jpg', legend: 'Eiffel Tower at night' },
    { image: 'images/7.jpg', legend: 'Underwater ecosystem' },
    { image: 'images/8.jpg', legend: 'Desert' },
    { image: 'images/9.jpg', legend: 'Sunset view' },
    { image: 'images/10.jpg', legend: 'The coast of Calvi' },
    { image: 'images/11.jpg', legend: 'Cathedral di Santa Maria del Fuore' }
];

// Objet contenant l'√©tat du carrousel.
let state;

/*************************************************************************************************/
/* ***************************************** FONCTIONS ***************************************** */
/*************************************************************************************************/

//fonction pour passer √† la slide suivante
function onSliderGoToNext()
{

    // Passage √† la slide suivante
    state.index++
    // Est-ce qu'on est arriv√© √† la fin de la liste des slides ?
    if(state.index === slides.length){
       // Oui, on revient au d√©but (le carrousel est circulaire).
       state.index = 0
    }
    // Mise √† jour de l'affichage.(appel fonction)
    refreshSlider()
}

//fonction pour passer √† la slide pr√©c√©dente
function onSliderGoToPrevious()
{

    // Passage √† la slide pr√©c√©dente.
    state.index--
    // Est-ce qu'on est revenu au d√©but de la liste des slides ?
    if(state.index < 0){
       // Oui, on revient √† la fin (le carrousel est circulaire).
       state.index = slides.length - 1 
    }
    // Mise √† jour de l'affichage.(appel fonction)
    refreshSlider()

}
// fonction pour afficher une slide al√©atoirement   
function onSliderGoToRandom()
{
    let index
     /*
         * R√©cup√©ration d'un num√©ro de slide al√©atoire diff√©rent
         * du num√©ro de slide actuel.
         DO WHILE
     */
    do {
        index = getRandomInteger(0, slides.length - 1)
    } while (index === state.index);
    // Passage √† une slide al√©atoire.
    state.index = index

    // Mise √† jour de l'affichage.(appel de fonction)
    refreshSlider()
}
/*
 * Quand on cr√©√© un gestionnaire d'√©v√®nements, le navigateur appelle la
 * fonction en fournissant un argument event repr√©sentant l'√©v√®nement lui-m√™me.
 *
 * Si le gestionnaire d'√©v√®nements n'a pas besoin de cet argument,
 * inutile de le d√©clarer !
 *
 * Mais ici on va en avoir besoin...
 */
function onSliderKeyup(event)
{
    console.log("üöÄ ~ event:", event)
    console.log("üöÄ ~ event:", event.code)
    /*
     * Les gestionnaires d'√©v√®nements d'appui sur une touche (√©v√®nements
     * keydown, keyup, keypress) contiennent une propri√©t√© keyCode dans l'objet
     * event repr√©sentant le code de la touche du clavier.
     *
     * Il existe de tr√®s nombreux codes, plus ou moins standards, voir la page :
     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode
     */
    //condition sela la touche qu'il a appuy√©
    
    //on appelera la fonction qui correspond √† la touche
    switch (event.code) {
        case RIGHT_ARROW_KEY:
        // On passe √† la slide suivante
        onSliderGoToNext()
            break;
        case SPACE_KEY:
        // On d√©marre ou on arr√™te le carrousel
        onSliderToggle()
            break;
        case LEFT_ARROW_KEY:
        // On passe √† la slide pr√©c√©dente
        onSliderGoToPrevious()
            break;
    
        default:
            break;
    }

}

//fonction pour afficher ou arr√©ter la lecture automatique
function onSliderToggle()
{
    // Modification de l'ic√¥ne du bouton pour d√©marrer ou arr√™ter le carrousel. PLAY PAUSE on peut modifier la class de l'icon fontawesome avec classList
    const icon = document.querySelector('#slider-toggle i')

    icon.classList.toggle('fa-play')
    icon.classList.toggle('fa-pause')
    // Si le carousel n'est pas d√©marr√© ?
    if(state.timer === null){
        //d√©marrage du carousel, toutes les deux secondes.
        state.timer = window.setInterval(onSliderGoToNext, 2000)
        console.log("state.timer", state.timer);
        /*
         * Modification du libell√© du bouton en mode "OFF".
         *
         * La variable sp√©ciale this est automatiquement initialis√©e par le
         * navigateur avec l'objet DOM qui a d√©clench√© l'√©v√®nement.
         *
         * C'est le bouton "D√©marrer/Arr√™ter le carrousel" qui a d√©clench√©
         * l'√©v√®nement, donc la variable sp√©ciale this vaut la m√™me chose
         * que l'objet renvoy√© par document.querySelector('#js-slider-toggle'); 
         */
         //modifier la propri√©t√© title
         this.title = 'Arr√™ter le carrousel'

         
         
    // sinon
    }else  {
        //arr√™t du carousel.
        window.clearInterval(state.timer)
        // R√©initialisation de la propri√©t√© pour le prochain clic sur le bouton.
        state.timer = null
        /*
         * Modification du libell√© du bouton en mode "ON".
         *
         * La variable sp√©ciale this est automatiquement initialis√©e par le
         * navigateur avec l'objet DOM qui a d√©clench√© l'√©v√®nement.
         *
         * C'est le bouton "D√©marrer/Arr√™ter le carrousel" qui a d√©clench√©
         * l'√©v√®nement, donc la variable sp√©ciale this vaut la m√™me chose
         * que l'objet renvoy√© par document.querySelector('#js-slider-toggle');
         */
         //modifier la propri√©t√© title
         this.title = 'D√©marrer le carrousel';


    }
}

//fonction pour afficher ou cacher la barre d'outils
function onToolbarToggle()
{
    // Modification de l'ic√¥ne du lien pour afficher ou cacher la barre d'outils. (on peut changer la classe avec classList)
    const icon = document.querySelector('#toolbar-toggle i');

    icon.classList.toggle('fa-arrow-down');
    icon.classList.toggle('fa-arrow-right');
    
    
    // Affiche ou cache la barre d'outils. (class hide dans le css)
    document.querySelector('.toolbar ul').classList.toggle('hide');
}

function refreshSlider()
{
    // Recherche des balises de contenu du carrousel.
    const sliderImage = document.querySelector('#slider img');
    const sliderLegend = document.querySelector('#slider figcaption');
    // Changement de la source de l'image et du texte de la l√©gende du carrousel.
    sliderImage.src = slides[state.index].image
    sliderLegend.textContent = slides[state.index].legend
    sliderImage.style.width = "840px"
    sliderImage.style.height = "636px"
}


/*************************************************************************************************/
/* ************************************** CODE PRINCIPAL *************************************** */
/*************************************************************************************************/
/*
 * Installation d'un gestionnaire d'√©v√®nement d√©clench√© quand l'arbre DOM sera
 * totalement construit par le navigateur.
 *
 * Le gestionnaire d'√©v√®nement est une fonction anonyme que l'on donne en deuxi√®me
 * argument directement √† document.addEventListener().
 */

document.addEventListener('DOMContentLoaded', function() {
    // on cr√©er l'objet state avec une propri√©t√© index pour les slides, et un timer √† l'arret au d√©marrage (null)
    state = {
        index: 0,
        timer: null
    }

    // Installation des gestionnaires d'√©v√®nement. (fonction utilities)
    installEventHandler('#slider-random', 'click', onSliderGoToRandom)
    installEventHandler('#slider-previous', 'click', onSliderGoToPrevious)
    installEventHandler('#slider-next', 'click', onSliderGoToNext)
    installEventHandler('#slider-toggle', 'click', onSliderToggle)
    installEventHandler('#toolbar-toggle', 'click', onToolbarToggle)
    //ajout d'un √©v√©nement sur le clavier qui appelera notre fonction onSliderKeyup
    document.addEventListener('keyup', onSliderKeyup)

     // Affichage initial.(appel de fonction)
     refreshSlider()
})


const test = document.querySelector("#test")
test.addEventListener("click", (e)=>{
    e.preventDefault()
    if(test.innerHTML == "play"){
        test.innerHTML = "stop"
    }else{
        test.innerHTML = "play"
    }
})